# Geany's snippets configuration file
#
# use \n or %newline% for a new line (it will be replaced by the used EOL char(s) - LF, CR/LF, CR).
# use \t or %ws% for an indentation step, it will be replaced according to the current document's indent mode.
# use \s to force whitespace at beginning or end of a value ('key= value' won't work, use 'key=\svalue').
# use %key% for all keys defined in the [Special] section.
# use %cursor% to define where the cursor should be placed after completion. You can define multiple
#     %cursor% wildcards and use the "Move cursor in snippet" to jump to the next defined cursor
#     position in the completed snippet.
# You can define a section for each supported filetype to overwrite default settings, the section
# name must match exactly the internal filetype name, run 'geany --ft-names' for a full list.
#
# Additionally, you can use most of the template wildcards like {developer}, {command:...},
# or {date} in the snippets.
# See the documentation for details.

# For a list of available filetype names, execute:
# geany --ft-names

# Default is used for all filetypes and keys can be overwritten by [filetype] sections
[Default]

# special keys to be used in other snippets, cannot be used "standalone"
# can be used by %key%, e.g. %brace_open%
# nesting of special keys is not supported (e.g. brace_open=\n{\n%brace_close% won't work)
# key "wordchars" is very special, it defines the word delimiting characters when looking for
# a word to auto complete, leave commented to use the default wordchars
[Special]
#brace_open=\n {\n\t
#brace_close=}\n
#block=\n{\n\t%cursor%\n}
#block_cursor=\n{\n\t%cursor%\n}
#wordchars=_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789

# Optional keybindings to insert snippets
# Note: these can be overridden by Geany's configurable keybindings
[Keybindings]
#for=<Ctrl>7

[Java]
b={                                                                                //\n}
c=\n\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s//
i=if (%cursor%)%block_cursor%\nelse%block_cursor%
f=for (int i = 0; i < %cursor%; i++)%brace_open%\n%brace_close%
s=final StringBuilder s = new StringBuilder();                                    //
sa=say("AAAA", a);
sb=say("BBBB", b);
sc=say("CCCC", c);
sd=say("DDDD", d);
se=say("EEEE", e);
sf=say("FFFF", f);
sg=say("GGGG", g);
sh=say("HHHH", h);
si=say("IIII", i);
sj=say("JJJJ", j);
sk=say("KKKK", k);
sl=say("LLLL", l);
sm=say("MMMM", m);
sn=say("NNNN", n);
so=say("OOOO", o);
sp=say("PPPP", p);
sq=say("QQQQ", q);
sr=say("RRRR", r);
ss=say("SSSS", s);
st=say("TTTT", t);
su=say("UUUU", u);
sv=say("VVVV", v);
sw=say("WWWW", w);
sx=say("XXXX", x);
sy=say("YYYY", y);
sz=say("ZZZZ", z);
switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%
try=try%block%\ncatch (%cursor%)%block_cursor%

[Perl]
m==~ m(%cursor%)is;
M=!~ m(%cursor%)is;
r==~ s(%cursor%) ()igs;
R=!~ s(%cursor%) ()igs;
sa=say STDERR "AAAA $a";
sb=say STDERR "BBBB $b";
sc=say STDERR "CCCC $c";
sd=say STDERR "DDDD $d";
se=say STDERR "EEEE $e";
sf=say STDERR "FFFF $f";
sg=say STDERR "GGGG $g";
sh=say STDERR "HHHH $h";
si=say STDERR "IIII $i";
sj=say STDERR "JJJJ $j";
sk=say STDERR "KKKK $k";
sl=say STDERR "LLLL $l";
sm=say STDERR "MMMM $m";
sn=say STDERR "NNNN $n";
so=say STDERR "OOOO $o";
sp=say STDERR "PPPP $p";
sq=say STDERR "QQQQ $q";
sr=say STDERR "RRRR $r";
ss=say STDERR "SSSS $s";
st=say STDERR "TTTT $t";
su=say STDERR "UUUU $u";
sv=say STDERR "VVVV $v";
sw=say STDERR "WWWW $w";
sx=say STDERR "XXXX $x";
sy=say STDERR "YYYY $y";
sz=say STDERR "ZZZZ $z";
#for=for (i = 0; i < %cursor%; i++)%block_cursor%
#while=while (%cursor%)%block_cursor%
#do=do\n{\n\t%cursor%\n} while (%cursor%)\n
#switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%

[C]
#if=if (%cursor%)%block_cursor%
#else=else%block_cursor%
#for=for (i = 0; i < %cursor%; i++)%block_cursor%
#while=while (%cursor%)%block_cursor%
#do=do\n{\n\t%cursor%\n} while (%cursor%)\n
#switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%

[C++]
#if=if (%cursor%)%block_cursor%
#else=else%block_cursor%
#for=for (int i = 0; i < %cursor%; i++)%brace_open%\n%brace_close%
#while=while (%cursor%)%block_cursor%
#do=do\n{\n\t%cursor%\n} while (%cursor%)\n
#switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%
#try=try%block%\ncatch (%cursor%)%block_cursor%

[PHP]
#if=if (%cursor%)%block_cursor%
#else=else%block_cursor%
#for=for ($i = 0; $i < %cursor%; $i++)%brace_open%\n%brace_close%
#while=while (%cursor%)%block_cursor%
#do=do\n{\n\t%cursor%\n} while (%cursor%)\n
#switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%
#try=try%block%\ncatch (%cursor%)%block_cursor%

[Javascript]
#if=if (%cursor%)%block_cursor%
#else=else%block_cursor%
#for=for (i = 0; i < %cursor%; i++)%block_cursor%
#while=while (%cursor%)%block_cursor%
#do=do\n{\n\t%cursor%\n} while (%cursor%)\n
#switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%
#try=try%block%\ncatch (%cursor%)%block_cursor%

[C#]
#if=if (%cursor%)%block_cursor%
#else=else%block_cursor%
#for=for (i = 0; i < %cursor%; i++)%block_cursor%
#while=while (%cursor%)%block_cursor%
#do=do\n{\n\t%cursor%\n} while (%cursor%)\n
#switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%
#try=try%block%\ncatch (%cursor%)%block_cursor%

[Vala]
#if=if (%cursor%)%block_cursor%
#else=else%block_cursor%
#for=for (i = 0; i < %cursor%; i++)%block_cursor%
#while=while (%cursor%)%block_cursor%
#do=do\n{\n\t%cursor%\n} while (%cursor%)\n
#switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%
#try=try%block%\ncatch (%cursor%)%block_cursor%

[ActionScript]
#if=if (%cursor%)%block_cursor%
#else=else%block_cursor%
#for=for (i = 0; i < %cursor%; i++)%block_cursor%
#while=while (%cursor%)%block_cursor%
#do=do\n{\n\t%cursor%\n} while (%cursor%)\n
#switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%
#try=try%block%\ncatch (%cursor%)%block_cursor%

[Python]
#for=for i in xrange(%cursor%):\n\t
#if=if %cursor%:\n\t
#elif=elif %cursor%:\n\t
#else=else:\n\t
#while=while %cursor%:\n\t
#try=try:\n\t%cursor%\nexcept Exception, ex:\n\t
#with=with %cursor%:\n\t
#def=def %cursor% (%cursor%):\n\t""" Function doc """\n\t
#class=class %cursor%:\n\t""" Class doc """\n\t\n\tdef __init__ (self):\n\t\t""" Class initialiser """\n\t\tpass

[HTML]
#table=<table>\n\t<tr>\n\t\t<td>%cursor%</td>\n\t</tr>\n</table>
